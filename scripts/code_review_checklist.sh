#!/bin/bash

### Provided by CI runner
#export CI_API_V4_URL='https://gitlab.com/api/v4'
#export CI_JOB_TOKEN=''  # NOTE lacks permissions
#export CI_PROJECT_PATH='mediaire/analytics/code-review'
#export CI_PROJECT_ID='30551020'
# TODO unfortunately not in our runner
#export CI_MERGE_REQUEST_IID='4'
###

### Provided by project CI variables
#export CI_PROJECT_TOKEN=''
###

# As the CI_JOB_TOKEN generated by the runner for this job session lacks the
# necessary permissions [https://docs.gitlab.com/ee/ci/jobs/ci_job_token.html]
# to modify the MR notes and project variables, we need to use a project
# specific token.
#
# Generate a token as described here
# [https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html]
# and add a variable CI_PROJECT_TOKEN with the token as its value as shown in
# [https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-project].

CHECKLIST="\
Code Review Checklist
---------------------

1. Avoid complexity, favor simpler solutions. Think about future
   maintainability.
   - Avoid smart and \"elegant\" one liners that are hard to read
   - Be rather more explicit, even if it does require more lines of code. The
      easier to read your code, the better! You and your fellow developers will
      be grateful!
   - Write code in a way that is easy to read even without comments, e.g. by
      giving functions and variables meaningful names.
   - Do however use comments where it improves understanding
2. Split code into meaningful modules / classes / functions.
   - When the code of your function spans over more than 30 lines, think about
     splitting it up into smaller functions
3. Reuse code whenever possible.
   - Think carefully before you introduce another dependency (i.e. library) in
     your code. In general, the less dependencies you have to handle, the
     better! Try using the standard library if wherever possible.
   - If you think about including a 3rd party library, check how mature it is
     (is it actively maintained, is it stable or only an alpha release, how
     many other people/companies are using it, are there enough tests ...)
4. Write code in a way such that it is easy to reuse and unit test.
   - A function should at best do only one thing
   - A function ideally has no side effects
5. Is there “enough” documentation in the code?
   - Good code should be self-descriptive, but there are always places where a
     small comment is needed. Short functions with clear names don’t always
     need to be documented, but otherwise we try to document functions and
     describe their parameters and return values.
   - For Python: you can use type hinting when possible. This removes the need
     of documenting the type of each parameter and return value.
   - Does the documentation format follow our standard? For Python we use
     [NumPy's ](ttps://numpydoc.readthedocs.io/en/latest/format.html).
6. Is the code clear / simple enough?
   - Good software is often more about avoiding complexity.
7. Are there any DRYs which should be refactored?
   - We try to avoid code repetition as it reduces future maintainability and
     almost always makes the final code longer and more complex than it should
     be.

_Please acknowledge that you checked all items by reacting to this note with
a :white_check_mark:._
"

VARIABLE_PREFIX=CI_CR_BOT_NOTE

note_found() {
	# check if a environment variable exists that indicates that this MR
	# already has a checklist
	curl \
		--header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
		--fail \
		--no-progress-meter \
		--request GET \
		"$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables" \
	| grep "\"${VARIABLE_PREFIX}_${CI_MERGE_REQUEST_IID}\""
}

create_note() {
	# create the checklist
	curl \
		--header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
		--fail \
		--no-progress-meter \
		--request POST \
		"$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes" \
		--data-urlencode "body=$CHECKLIST"

	# create a environment variable to indicate that this MR 
	curl \
		--header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
		--fail \
		--no-progress-meter \
		--request POST \
		"$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables" \
		--data-urlencode "key=${VARIABLE_PREFIX}_${CI_MERGE_REQUEST_IID}" \
		--data-urlencode "value=true" \
		--data-urlencode "protected=false"
}


if note_found; then
	echo "Checklist already posted."
else
	echo "No checklist found. Creating one."
	echo
	echo "$CHECKLIST"
	echo
	create_note
fi

